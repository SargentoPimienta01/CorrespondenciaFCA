---
import Layout from '../../layouts/Correspondencia.astro';
import Proceso from '../../components/New_Process';
import DocumentList from '../../components/DocProcList';

// Obtener el ID desde los parámetros de la URL
const { id } = Astro.params;
console.log('ID obtenido de los parámetros:', id); // Verificar el ID

let token = null;
let proceso = null;

// Intentar obtener el token desde las cookies (establecido por el cliente)
token = Astro.cookies.get('token');
console.log('Token antes de enviar:', token, typeof token); // Verificar si el token está presente

if (token && typeof token === 'object') {
  token = token.value;  // Extrae el valor del token
}

console.log('Token extraído:', token);

if (!token) {
  console.error('No se ha encontrado un token de autenticación en las cookies.');
} else {
  try {
    // Realizar la solicitud GET con el token
    const response = await fetch(`http://localhost:5064/api/procesos/${id}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('Token formateado:', token);
    console.log('Id Obtenido:', id);
    console.log('Respuesta', response.headers);
    console.log('Estado de la respuesta:', response.status); // Verificar el estado de la respuesta

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Error recibido de la API:', errorData); // Verificar los errores recibidos
      throw new Error('Error al obtener el proceso desde la API');
    }

    const result = await response.json();
    proceso = result.data.proceso;  // Acceder correctamente a `data.proceso`
    console.log('Proceso obtenido:', proceso); // Verificar los datos del proceso obtenidos

  } catch (error) {
    console.error('Hubo un problema al obtener los datos del proceso:', error);
  }
}
---

<Layout title="Documentos">
  <section class="p-5">
    {proceso ? (
      <Proceso 
        idProceso={proceso.idProceso}  
        fechaInicio={proceso.fechaInicio ? new Date(proceso.fechaInicio).toISOString().split('T')[0] : 'Fecha no disponible'}
        fechaNotificacion={proceso.fechaNotificacion ? new Date(proceso.fechaNotificacion).toISOString().split('T')[0] : 'Fecha no disponible'}
        descripcion={proceso.descripcion}  
        infoArchivo={proceso.infoArchivo}
       
        isEdit={false}
      />
    ) : (
      <p>No se encontró el documento.</p>
    )}

    <!-- Pasar el ID al componente DocumentList para obtener los documentos relacionados -->
    <DocumentList procesoId={id} client:load />
  </section>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Recuperar el token desde localStorage en el cliente
    const token = localStorage.getItem('token');
    console.log('Token recuperado desde localStorage:', token); // Verificar el token en el cliente

    if (!token) {
      console.error('No se ha encontrado un token de autenticación');
      return;
    }

    // Establecer el token como una cookie para que pueda ser utilizado en el servidor
    document.cookie = `token=${token}; path=/;`;
    console.log('Token establecido como cookie.'); // Confirmación de que el token se ha guardado como cookie
  });
</script>
